# Functions in JavaScript

## **Definition of a Function**
- **Definition**: A function is a block of code that performs a specific task and can be executed when called.
- **Example**:
    ```javascript
    function sayHello() {
        console.log("Hello, World!");  // This is the task the function performs
    }
    sayHello();  // Calling the function to run its code
    ```

### **Key Points about Functions**
- Functions allow you to **group reusable code**.
- They can be called **multiple times** to perform the same task.
- Functions can **accept inputs** (parameters) and **return outputs** (return values).

---

## **Function with Parameters**
- **Definition**: A function can accept inputs (called parameters) to make it more flexible.
- **Example**:
    ```javascript
    function greet(name) {
        console.log("Hello, " + name);  // The function uses the input 'name'
    }
    greet("Alice");  // Output: Hello, Alice
    ```

---

## **Function with Return Value**
- **Definition**: Functions can **return** a value after performing their task.
- **Example**:
    ```javascript
    function add(a, b) {
        return a + b;  // The function returns the sum of 'a' and 'b'
    }
    let result = add(5, 3);  // Calls the function and stores the result in 'result'
    console.log(result);  // Output: 8
    ```

---

### **Types of Functions**

1. **Function Declaration**: 
    - This is the most common way to define a function.
    - **Example**:
        ```javascript
        function multiply(x, y) {
            return x * y;
        }
        console.log(multiply(2, 3)); // Output: 6
        ```

2. **Function Expression**: 
    - Functions can also be defined inside variables.
    - **Example**:
        ```javascript
        let divide = function(x, y) {
            return x / y;
        };
        console.log(divide(10, 2)); // Output: 5
        ```

---

### **Summary**
- **Function**: A block of code that performs a specific task and can be called to execute multiple times.
- **Function with Parameters**: Functions can accept inputs to perform tasks with different values.
- **Function with Return Value**: Functions can return a value after performing a task.

# Parameters and Arguments in JavaScript

## **Definition of Parameters**
- **Definition**: **Parameters** are the names used when defining a function, which represent the values the function will use.
- **Example**:
    ```javascript
    function greet(name) {  // 'name' is the parameter
        console.log("Hello, " + name);
    }
    ```

### **Key Points about Parameters**
- Parameters act like **placeholders** for the values that will be passed when the function is called.
- They are defined inside the parentheses `()` when creating a function.

---

## **Definition of Arguments**
- **Definition**: **Arguments** are the actual values passed to a function when it is called, replacing the parameters.
- **Example**:
    ```javascript
    greet("Alice");  // "Alice" is the argument passed to the function
    ```

### **Key Points about Arguments**
- Arguments are the **real values** or **data** you pass into a function when calling it.
- They are used in place of parameters inside the function to complete the task.

---

## **Example with Both Parameters and Arguments**
- **Definition**: Functions take parameters, and when calling them, you pass arguments to provide the actual data.
- **Example**:
    ```javascript
    function add(a, b) {  // 'a' and 'b' are parameters
        return a + b;
    }
    let result = add(5, 3);  // 5 and 3 are arguments passed to the function
    console.log(result);  // Output: 8
    ```

---

### **Summary**
- **Parameters** are the **names** used in the function definition to represent the values.
- **Arguments** are the **actual values** passed when calling the function.

# Scope in JavaScript

## **1. Global Scope**
- **Definition**: Variables declared outside of any function or block have **global scope**, meaning they are accessible from anywhere in the code.
- **Example**:
    ```javascript
    let globalVar = "I am global";  // This is a global variable
    function showGlobal() {
        console.log(globalVar);  // Accessing global variable inside a function
    }
    showGlobal();  // Output: I am global
    console.log(globalVar);  // Output: I am global (accessible outside as well)
    ```

### **Key Points about Global Scope**
- A **global variable** can be accessed from any part of the program.
- Be careful with global variables, as they can be modified anywhere, leading to unexpected results.

---

## **2. Function Scope**
- **Definition**: Variables declared inside a function have **function scope**, meaning they are only accessible inside that function.
- **Example**:
    ```javascript
    function myFunction() {
        let functionVar = "I am inside a function";  // This is a function-scoped variable
        console.log(functionVar);  // Output: I am inside a function
    }
    myFunction();
    console.log(functionVar);  // Error: functionVar is not defined outside the function
    ```

### **Key Points about Function Scope**
- **Function-scoped** variables are **only accessible within the function**.
- They **cannot be accessed outside the function**.

---

## **3. Block Scope**
- **Definition**: Variables declared inside a block (like inside loops or conditionals) using `let` or `const` have **block scope**, meaning they are only accessible inside the block.
- **Example**:
    ```javascript
    if (true) {
        let blockVar = "I am inside a block";  // This is a block-scoped variable
        console.log(blockVar);  // Output: I am inside a block
    }
    console.log(blockVar);  // Error: blockVar is not defined outside the block
    ```

### **Key Points about Block Scope**
- Variables declared with `let` or `const` inside a block are only accessible **within that block**.
- They **do not** exist outside the block.

---

## **4. Nested Scope**
- **Definition**: **Nested scope** refers to when a function or block is inside another function or block. Inner functions or blocks can access variables from outer scopes.
- **Example**:
    ```javascript
    function outerFunction() {
        let outerVar = "I am outside";
        function innerFunction() {
            console.log(outerVar);  // Accessing variable from the outer function
        }
        innerFunction();  // Output: I am outside
    }
    outerFunction();
    ```

### **Key Points about Nested Scope**
- An **inner function or block** can **access variables** from the **outer function or block**.
- However, variables in the inner scope are not accessible to the outer scope.

---

### **Differences Between Global Scope, Function Scope, Block Scope, and Nested Scope**

| Feature                | **Global Scope**                              | **Function Scope**                         | **Block Scope**                              | **Nested Scope**                           |
|------------------------|-----------------------------------------------|--------------------------------------------|---------------------------------------------|--------------------------------------------|
| **Where It Works**      | Anywhere in the entire code                  | Inside the function                        | Inside the block (e.g., loops, if statements) | Inside nested functions or blocks         |
| **Variable Accessibility** | Accessible everywhere                      | Accessible only inside the function        | Accessible only inside the block            | Inner functions/blocks can access outer scopes |
| **Example**             | `let globalVar = "I'm global";`               | `let funcVar = "I'm inside a function";`    | `if(true){ let blockVar = "I'm inside block"; }` | Nested functions can access outer variables |

---

### **Summary**
- **Global Scope**: Variables are accessible from anywhere in the code.
- **Function Scope**: Variables are accessible only within the function where they are defined.
- **Block Scope**: Variables are accessible only within the block (using `let` or `const`).
- **Nested Scope**: Inner functions or blocks can access variables from outer functions or blocks.

# Arrow Functions in JavaScript

## **Definition of Arrow Function**
- **Definition**: Arrow functions are a shorter way to write functions in JavaScript using `=>` syntax.
- **Example**:
    ```javascript
    const greet = () => {
        console.log("Hello, World!");  // This is an arrow function
    };
    greet();  // Output: Hello, World!
    ```

---

## **Key Points About Arrow Functions**
- Arrow functions use `=>` to define a function.
- They are shorter and simpler than traditional function expressions.
- They **do not have their own `this`**, meaning they use the `this` from the surrounding context (lexical scoping).

---

## **Arrow Function with Parameters**
- **Definition**: You can pass parameters to an arrow function just like any other function.
- **Example**:
    ```javascript
    const add = (a, b) => a + b;  // Shorter syntax for returning the sum of 'a' and 'b'
    console.log(add(3, 4));  // Output: 7
    ```

---

## **Arrow Function with Single Parameter**
- **Definition**: If the arrow function has only one parameter, you can omit the parentheses `()`.
- **Example**:
    ```javascript
    const square = x => x * x;  // No need for parentheses if only one parameter
    console.log(square(5));  // Output: 25
    ```

---

## **Arrow Function with No Parameters**
- **Definition**: If the arrow function does not take any parameters, you must use empty parentheses `()`.
- **Example**:
    ```javascript
    const sayHello = () => console.log("Hello!");
    sayHello();  // Output: Hello!
    ```

---

### **Arrow Function vs Regular Function**

| Feature                  | **Arrow Function**                           | **Regular Function**                            |
|--------------------------|----------------------------------------------|------------------------------------------------|
| **Syntax**               | Shorter with `=>` syntax                     | Longer with `function` keyword                 |
| **`this` Binding**       | Inherits `this` from the surrounding context | `this` is dynamic and changes based on the call |
| **Example**              | `const greet = () => console.log("Hi");`     | `function greet() { console.log("Hi"); }`      |

---

### **Summary**
- **Arrow Function**: A shorter way to write functions using `=>`, with simpler syntax and inherited `this` context.
- Arrow functions are useful for cleaner and more concise code.
