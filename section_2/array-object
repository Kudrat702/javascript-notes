# Arrays in JavaScript

## **Definition of Array**
- **Definition**: An array is a collection of items (values), such as numbers, strings, or objects, stored in a single variable. Arrays can hold multiple values at once.
- **Example**:
    ```javascript
    let fruits = ["apple", "banana", "orange"];
    console.log(fruits); // Output: ["apple", "banana", "orange"]
    ```

## **Key Points About Arrays**
- Arrays are **ordered**, meaning the items are stored in a specific order.
- Each item in an array has a **numerical index** (starting from 0).
- Arrays can store **different types of values** (e.g., strings, numbers, objects).

---

### **Differences Between Arrays and Other Data Types**

| Feature                 | **Array**                              | **Other Data Types (String, Number, etc.)** |
|-------------------------|----------------------------------------|---------------------------------------------|
| **Multiple Values**      | Stores multiple values at once         | Stores a single value                      |
| **Data Type**            | Can store different types of values    | Usually stores one type of value (string, number) |
| **Accessing Values**     | Access elements using indexes          | Can access value directly                  |

---

### **Examples of Array Methods**

- **Accessing Array Elements**:
    ```javascript
    let fruits = ["apple", "banana", "orange"];
    console.log(fruits[1]); // Output: banana (index 1)
    ```

- **Changing Array Element**:
    ```javascript
    fruits[1] = "grape";
    console.log(fruits); // Output: ["apple", "grape", "orange"]
    ```

- **Adding Elements**:
    ```javascript
    fruits.push("kiwi");
    console.log(fruits); // Output: ["apple", "grape", "orange", "kiwi"]
    ```

- **Length of Array**:
    ```javascript
    console.log(fruits.length); // Output: 4
    ```

---

### **Key Points**
- Arrays store multiple values in a single variable.
- You can access or modify values using their index (starting at 0).
- Arrays are flexible and can hold different types of values.

# Arrays are Mutable in JavaScript

## **Definition of Mutable Arrays**
- **Definition**: Arrays are **mutable**, meaning their elements can be changed (modified) after the array is created.
- **Example**:
    ```javascript
    let fruits = ["apple", "banana", "orange"];
    fruits[1] = "grape";  // Change the second element (index 1) to "grape"
    console.log(fruits);   // Output: ["apple", "grape", "orange"]
    ```

## **Key Points**
- **Mutable** means that the values in the array can be modified, added, or removed.
- You can **change individual elements** by accessing them with their index and reassigning a new value.
- Arrays can also be **extended** or **shrunk** by adding or removing elements.

---

### **Differences Between Mutable Arrays and Immutable Types**

| Feature                   | **Array (Mutable)**                | **String/Number (Immutable)**        |
|---------------------------|------------------------------------|--------------------------------------|
| **Can Change Values**      | Yes, values can be changed         | No, the value cannot be changed      |
| **Modify**                 | Can change, add, or remove elements| Cannot modify the value directly     |
| **Reassign Entire Object** | Yes, you can change the whole array| Reassigning a new string/number creates a new object |
  
---

### **Examples of Array Modification**

- **Changing an Element**:
    ```javascript
    let fruits = ["apple", "banana", "orange"];
    fruits[0] = "pear";  // Changes "apple" to "pear"
    console.log(fruits);  // Output: ["pear", "banana", "orange"]
    ```

- **Adding an Element**:
    ```javascript
    fruits.push("kiwi");  // Adds "kiwi" at the end
    console.log(fruits);  // Output: ["pear", "banana", "orange", "kiwi"]
    ```

- **Removing an Element**:
    ```javascript
    fruits.pop();  // Removes the last element ("kiwi")
    console.log(fruits);  // Output: ["pear", "banana", "orange"]
    ```

---

### **Key Points**
- Arrays are **mutable**, meaning you can **modify**, **add**, or **remove** elements after the array is created.
- Unlike **strings** or **numbers**, which are **immutable** (unchangeable once created), arrays allow for easy modifications.

# Array Methods in JavaScript

### **1. `push()`**
- **Definition**: Adds one or more elements to the end of an array.
- **Example**:
    ```javascript
    let fruits = ["apple", "banana"];
    fruits.push("orange"); // Adds "orange" to the end
    console.log(fruits); // Output: ["apple", "banana", "orange"]
    ```

### **2. `pop()`**
- **Definition**: Removes the last element from an array.
- **Example**:
    ```javascript
    let fruits = ["apple", "banana", "orange"];
    fruits.pop(); // Removes "orange"
    console.log(fruits); // Output: ["apple", "banana"]
    ```

### **3. `unshift()`**
- **Definition**: Adds one or more elements to the beginning of an array.
- **Example**:
    ```javascript
    let fruits = ["banana", "orange"];
    fruits.unshift("apple"); // Adds "apple" to the beginning
    console.log(fruits); // Output: ["apple", "banana", "orange"]
    ```

### **4. `shift()`**
- **Definition**: Removes the first element from an array.
- **Example**:
    ```javascript
    let fruits = ["apple", "banana", "orange"];
    fruits.shift(); // Removes "apple"
    console.log(fruits); // Output: ["banana", "orange"]
    ```

### **5. `indexOf()`**
- **Definition**: Returns the index of the first occurrence of a specified element in an array.
- **Example**:
    ```javascript
    let fruits = ["apple", "banana", "orange"];
    console.log(fruits.indexOf("banana")); // Output: 1 (index of "banana")
    ```

### **6. `concat()`**
- **Definition**: Combines two or more arrays into one new array.
- **Example**:
    ```javascript
    let fruits = ["apple", "banana"];
    let moreFruits = ["orange", "kiwi"];
    let allFruits = fruits.concat(moreFruits);
    console.log(allFruits); // Output: ["apple", "banana", "orange", "kiwi"]
    ```

### **7. `reverse()`**
- **Definition**: Reverses the order of the elements in an array.
- **Example**:
    ```javascript
    let fruits = ["apple", "banana", "orange"];
    fruits.reverse(); // Reverses the array
    console.log(fruits); // Output: ["orange", "banana", "apple"]
    ```

### **8. `slice()`**
- **Definition**: Returns a shallow copy of a portion of an array into a new array.
- **Example**:
    ```javascript
    let fruits = ["apple", "banana", "orange"];
    let slicedFruits = fruits.slice(1, 3); // Copies elements from index 1 to index 3 (not including 3)
    console.log(slicedFruits); // Output: ["banana", "orange"]
    ```

### **9. `splice()`**
- **Definition**: Adds or removes elements from an array at a specified index.
- **Example**:
    ```javascript
    let fruits = ["apple", "banana", "orange"];
    fruits.splice(1, 1, "grape"); // Removes "banana" and adds "grape"
    console.log(fruits); // Output: ["apple", "grape", "orange"]
    ```

### **10. `sort()`**
- **Definition**: Sorts the elements of an array in ascending order.
- **Example**:
    ```javascript
    let numbers = [4, 2, 5, 1, 3];
    numbers.sort(); // Sorts numbers in ascending order
    console.log(numbers); // Output: [1, 2, 3, 4, 5]
    ```

---

## **Nested Arrays (Multi-dimensional Arrays)**

- **Definition**: A **nested array** is an array that contains other arrays as its elements (also known as multi-dimensional arrays).
- **Example**:
    ```javascript
    let matrix = [
      [1, 2, 3],
      [4, 5, 6],
      [7, 8, 9]
    ];
    console.log(matrix[0]); // Output: [1, 2, 3] (first row of the matrix)
    console.log(matrix[1][2]); // Output: 6 (element at row 1, column 2)
    ```

---

## **Spread Operator (`...`)**

- **Definition**: The **spread operator** `...` is used to expand or spread elements from an array or object into a new array or object.
- **Example**:
    ```javascript
    let fruits = ["apple", "banana"];
    let moreFruits = [...fruits, "orange", "kiwi"]; // Spread fruits into a new array
    console.log(moreFruits); // Output: ["apple", "banana", "orange", "kiwi"]
    ```

---

### **Summary of Array Methods**

| Method              | Description                                        | Example                                     |
|---------------------|----------------------------------------------------|---------------------------------------------|
| **`push()`**         | Adds elements to the end of the array              | `fruits.push("orange")` → `["apple", "banana", "orange"]` |
| **`pop()`**          | Removes the last element from the array            | `fruits.pop()` → `["apple", "banana"]`      |
| **`unshift()`**      | Adds elements to the beginning of the array        | `fruits.unshift("apple")` → `["apple", "banana", "orange"]` |
| **`shift()`**        | Removes the first element from the array           | `fruits.shift()` → `["banana", "orange"]`   |
| **`indexOf()`**      | Returns the index of the first occurrence of an element | `fruits.indexOf("banana")` → `1`           |
| **`concat()`**       | Combines two or more arrays into one               | `fruits.concat(moreFruits)` → `["apple", "banana", "orange", "kiwi"]` |
| **`reverse()`**      | Reverses the order of the elements in the array    | `fruits.reverse()` → `["orange", "banana", "apple"]` |
| **`slice()`**        | Creates a shallow copy of a portion of the array   | `fruits.slice(1, 3)` → `["banana", "orange"]` |
| **`splice()`**       | Adds/removes elements from an array at a specified position | `fruits.splice(1, 1, "grape")` → `["apple", "grape", "orange"]` |
| **`sort()`**         | Sorts the elements of the array                    | `numbers.sort()` → `[1, 2, 3, 4, 5]`        |

### **Key Points**
- Arrays can be **modified** using these methods.
- The **spread operator** (`...`) is useful for copying arrays or merging them.
- **Nested arrays** are arrays inside arrays, often used for matrices or multi-dimensional data.

# Function Scope vs Block Scope in JavaScript

## **1. Function Scope**
- **Definition**: A variable declared inside a function is only accessible within that function. This is called **function scope**.
- **Example**:
    ```javascript
    function exampleFunction() {
        let x = 10;  // 'x' is scoped to this function
        console.log(x); // Output: 10
    }
    exampleFunction();
    console.log(x); // Error: 'x' is not defined outside the function
    ```

### **Key Points about Function Scope**
- Variables declared with **`var`** are function-scoped.
- These variables are **accessible only within the function** where they are declared.
- They are **not accessible outside the function**.

---

## **2. Block Scope**
- **Definition**: A variable declared inside a block (enclosed in `{}`) is only accessible within that block. This is called **block scope**.
- **Example**:
    ```javascript
    if (true) {
        let x = 20;  // 'x' is scoped to this block
        console.log(x); // Output: 20
    }
    console.log(x); // Error: 'x' is not defined outside the block
    ```

### **Key Points about Block Scope**
- Variables declared with **`let`** and **`const`** are block-scoped.
- They are only **accessible inside the block** (e.g., inside `{}`).
- Block scope is often used in loops, conditionals, and functions.

---

### **Differences Between Function Scope and Block Scope**

| Feature            | **Function Scope**                   | **Block Scope**                          |
|--------------------|--------------------------------------|------------------------------------------|
| **Where It Works** | Works inside functions               | Works inside blocks (like loops, if)    |
| **Variables**      | `var` is function-scoped             | `let` and `const` are block-scoped      |
| **Accessibility**  | Variable is only accessible inside the function | Variable is only accessible inside the block |
| **Example**        | `function test() { var a = 10; }`   | `if (true) { let b = 20; }`             |

---

### **Summary**

- **Function Scope**: Variables declared with `var` are available only within the function.
- **Block Scope**: Variables declared with `let` and `const` are available only within the block (inside `{}`).
